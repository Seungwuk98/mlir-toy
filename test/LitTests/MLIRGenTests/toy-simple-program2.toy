# RUN: toyc %s -action=toy | FileCheck %s

def transpose_transpose(a) {
  return transpose(transpose(a));
}

def main() {
  var a<2, 3> = [1, 2, 3, 4, 5, 6];
  transpose_transpose(a);
  return;
}

# CHECK-LABEL:  toy.func private @transpose_transpose 
# CHECK-SAME:          ([[ARG_0:%.*]]: tensor<*xf64>) -> tensor<*xf64> {
# CHECK-NEXT:   [[VAL_0:%.*]] = toy.transpose([[ARG_0]] : tensor<*xf64>) to tensor<*xf64>
# CHECK-NEXT:   [[VAL_1:%.*]] = toy.transpose([[VAL_0]] : tensor<*xf64>) to tensor<*xf64>
# CHECK-NEXT:   toy.return [[VAL_1]] : tensor<*xf64>
# CHECK-NEXT: }

# CHECK-LABEL: toy.func @main() {
# CHECK-NEXT:   [[VAL_2:%.*]] = toy.constant dense<[1.000000e+00, 2.000000e+00, 3.000000e+00, 4.000000e+00, 5.000000e+00, 6.000000e+00]> : tensor<6xf64>
# CHECK-NEXT:   [[VAL_3:%.*]] = toy.reshape([[VAL_2]] : tensor<6xf64>) to tensor<2x3xf64>
# CHECK-NEXT:   [[VAL_4:%.*]] = toy.generic_call @transpose_transpose([[VAL_3]]) : (tensor<2x3xf64>) -> tensor<*xf64>
# CHECK-NEXT:   toy.return
# CHECK-NEXT: }

