# RUN: toyc %s -action=toy | FileCheck %s --check-prefix=TOY 
# RUN: toyc %s -action=affine | FileCheck %s --check-prefix=AFFINE

def main() {
  var a<2, 3> = [1, 2, 3, 4, 5, 6]; 
  var b = transpose(a);
  print(b);                
}

# TOY-LABEL: toy.func @main() 
# TOY-NEXT:    [[M_0:%.*]] = toy.constant dense<[1.000000e+00, 2.000000e+00, 3.000000e+00, 4.000000e+00, 5.000000e+00, 6.000000e+00]> : tensor<6xf64>
# TOY-NEXT:    [[M_1:%.*]] = toy.reshape([[M_0]] : tensor<6xf64>) to tensor<2x3xf64>
# TOY-NEXT:    [[M_2:%.*]] = toy.transpose([[M_1]] : tensor<2x3xf64>) to tensor<*xf64>
# TOY-NEXT:    toy.print [[M_2]] : tensor<*xf64>
# TOY-NEXT:    toy.return

# AFFINE-LABEL:  func.func @main() 
# AFFINE-NEXT:    [[ALLOC_TRANSPOSE:%.*]] = memref.alloc() : memref<3x2xf64>
# AFFINE-NEXT:    [[ALLOC_CONSTANT:%.*]] = memref.alloc() : memref<2x3xf64>
# AFFINE-NEXT:    [[C0:%.*]] = arith.constant 0 : index
# AFFINE-NEXT:    [[C1:%.*]] = arith.constant 1 : index
# AFFINE-NEXT:    [[C2:%.*]] = arith.constant 2 : index
# AFFINE-NEXT:    [[F1:%.*]] = arith.constant 1.000000e+00 : f64
# AFFINE-NEXT:    [[F2:%.*]] = arith.constant 2.000000e+00 : f64
# AFFINE-NEXT:    [[F3:%.*]] = arith.constant 3.000000e+00 : f64
# AFFINE-NEXT:    [[F4:%.*]] = arith.constant 4.000000e+00 : f64
# AFFINE-NEXT:    [[F5:%.*]] = arith.constant 5.000000e+00 : f64
# AFFINE-NEXT:    [[F6:%.*]] = arith.constant 6.000000e+00 : f64
# AFFINE-NEXT:    affine.store [[F1]], [[ALLOC_CONSTANT]][[[C0]], [[C0]]] : memref<2x3xf64>
# AFFINE-NEXT:    affine.store [[F2]], [[ALLOC_CONSTANT]][[[C0]], [[C1]]] : memref<2x3xf64>
# AFFINE-NEXT:    affine.store [[F3]], [[ALLOC_CONSTANT]][[[C0]], [[C2]]] : memref<2x3xf64>
# AFFINE-NEXT:    affine.store [[F4]], [[ALLOC_CONSTANT]][[[C1]], [[C0]]] : memref<2x3xf64>
# AFFINE-NEXT:    affine.store [[F5]], [[ALLOC_CONSTANT]][[[C1]], [[C1]]] : memref<2x3xf64>
# AFFINE-NEXT:    affine.store [[F6]], [[ALLOC_CONSTANT]][[[C1]], [[C2]]] : memref<2x3xf64>
# AFFINE-NEXT:    affine.for [[IV0:%.*]] = 0 to 3 {
# AFFINE-NEXT:      affine.for [[IV1:%.*]] = 0 to 2 {
# AFFINE-NEXT:        [[LOAD_VALUE:%.*]] = affine.load [[ALLOC_CONSTANT]][[[IV1]], [[IV0]]] : memref<2x3xf64>
# AFFINE-NEXT:        memref.store [[LOAD_VALUE]], [[ALLOC_TRANSPOSE]][%arg0, %arg1] : memref<3x2xf64>
# AFFINE-NEXT:      }
# AFFINE-NEXT:    }
# AFFINE-NEXT:    toy.print [[ALLOC_TRANSPOSE]] : memref<3x2xf64>
# AFFINE-NEXT:    memref.dealloc [[ALLOC_CONSTANT]] : memref<2x3xf64>
# AFFINE-NEXT:    memref.dealloc %alloc : memref<3x2xf64>
# AFFINE-NEXT:    return

