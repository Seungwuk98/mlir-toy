# RUN: toyc %s -action=toy | FileCheck %s --check-prefix=TOY 
# RUN: toyc %s -action=affine | FileCheck %s --check-prefix=AFFINE

def transpose_multiply(a, b) {
  return transpose(a) * transpose(b);
}

# TOY-LABEL: toy.func private @transpose_multiply(
# TOY-SAME:                                       [[T_ARG_0:%.*]]: tensor<*xf64>, [[T_ARG_1:%.*]]: tensor<*xf64>) -> tensor<*xf64>
# TOY-NEXT:   [[T_0:%.*]] = toy.transpose([[T_ARG_0]] : tensor<*xf64>) to tensor<*xf64>
# TOY-NEXT:   [[T_1:%.*]] = toy.transpose([[T_ARG_1]] : tensor<*xf64>) to tensor<*xf64>
# TOY-NEXT:   [[T_2:%.*]] = toy.mul [[T_0]], [[T_1]] : tensor<*xf64>
# TOY-NEXT:   toy.return [[T_2]] : tensor<*xf64>

def main() {
  var a<2, 3> = [1, 2, 3, 4, 5, 6];
  var b<2, 3> = [6, 5, 4, 3, 2, 1];
  print(transpose_multiply(a, b));
}

# TOY-LABEL: toy.func @main() 
# TOY-NEXT:    [[M_0:%.*]] = toy.constant dense<[1.000000e+00, 2.000000e+00, 3.000000e+00, 4.000000e+00, 5.000000e+00, 6.000000e+00]> : tensor<6xf64>
# TOY-NEXT:    [[M_1:%.*]] = toy.reshape([[M_0]] : tensor<6xf64>) to tensor<2x3xf64>
# TOY-NEXT:    [[M_2:%.*]] = toy.constant dense<[6.000000e+00, 5.000000e+00, 4.000000e+00, 3.000000e+00, 2.000000e+00, 1.000000e+00]> : tensor<6xf64>
# TOY-NEXT:    [[M_3:%.*]] = toy.reshape([[M_2]] : tensor<6xf64>) to tensor<2x3xf64>
# TOY-NEXT:    [[M_4:%.*]] = toy.generic_call @transpose_multiply([[M_1]], [[M_3]]) : (tensor<2x3xf64>, tensor<2x3xf64>) -> tensor<*xf64>
# TOY-NEXT:    toy.print [[M_4]] : tensor<*xf64>
# TOY-NEXT:    toy.return


# AFFINE-LABEL:  func.func @main() {
# AFFINE-NEXT:    [[ALLOC_MUL:%.*]] = memref.alloc() : memref<3x2xf64>
# AFFINE-NEXT:    [[ALLOC_TRANSPOSE_2:%.*]] = memref.alloc() : memref<3x2xf64>
# AFFINE-NEXT:    [[ALLOC_TRANSPOSE_1:%.*]] = memref.alloc() : memref<3x2xf64>
# AFFINE-NEXT:    [[ALLOC_CONST_2:%.*]] = memref.alloc() : memref<2x3xf64>
# AFFINE-NEXT:    [[ALLOC_CONST_1:%.*]] = memref.alloc() : memref<2x3xf64>
# AFFINE-NEXT:    [[C0:%.*]] = arith.constant 0 : index
# AFFINE-NEXT:    [[C1:%.*]] = arith.constant 1 : index
# AFFINE-NEXT:    [[C2:%.*]] = arith.constant 2 : index
# AFFINE-NEXT:    [[F1:%.*]] = arith.constant 1.000000e+00 : f64
# AFFINE-NEXT:    [[F2:%.*]] = arith.constant 2.000000e+00 : f64
# AFFINE-NEXT:    [[F3:%.*]] = arith.constant 3.000000e+00 : f64
# AFFINE-NEXT:    [[F4:%.*]] = arith.constant 4.000000e+00 : f64
# AFFINE-NEXT:    [[F5:%.*]] = arith.constant 5.000000e+00 : f64
# AFFINE-NEXT:    [[F6:%.*]] = arith.constant 6.000000e+00 : f64
# AFFINE-NEXT:    affine.store [[F1]], [[ALLOC_CONST_1]][[[C0]], [[C0]]] : memref<2x3xf64>
# AFFINE-NEXT:    affine.store [[F2]], [[ALLOC_CONST_1]][[[C0]], [[C1]]] : memref<2x3xf64>
# AFFINE-NEXT:    affine.store [[F3]], [[ALLOC_CONST_1]][[[C0]], [[C2]]] : memref<2x3xf64>
# AFFINE-NEXT:    affine.store [[F4]], [[ALLOC_CONST_1]][[[C1]], [[C0]]] : memref<2x3xf64>
# AFFINE-NEXT:    affine.store [[F5]], [[ALLOC_CONST_1]][[[C1]], [[C1]]] : memref<2x3xf64>
# AFFINE-NEXT:    affine.store [[F6]], [[ALLOC_CONST_1]][[[C1]], [[C2]]] : memref<2x3xf64>
# AFFINE-NEXT:    affine.store [[F6]], [[ALLOC_CONST_2]][[[C0]], [[C0]]] : memref<2x3xf64>
# AFFINE-NEXT:    affine.store [[F5]], [[ALLOC_CONST_2]][[[C0]], [[C1]]] : memref<2x3xf64>
# AFFINE-NEXT:    affine.store [[F4]], [[ALLOC_CONST_2]][[[C0]], [[C2]]] : memref<2x3xf64>
# AFFINE-NEXT:    affine.store [[F3]], [[ALLOC_CONST_2]][[[C1]], [[C0]]] : memref<2x3xf64>
# AFFINE-NEXT:    affine.store [[F2]], [[ALLOC_CONST_2]][[[C1]], [[C1]]] : memref<2x3xf64>
# AFFINE-NEXT:    affine.store [[F1]], [[ALLOC_CONST_2]][[[C1]], [[C2]]] : memref<2x3xf64>
# AFFINE-NEXT:    affine.for [[IV0:%.*]] = 0 to 3 {
# AFFINE-NEXT:      affine.for [[IV1:%.*]] = 0 to 2 {
# AFFINE-NEXT:        [[LOAD_0:%.*]] = affine.load [[ALLOC_CONST_1]][[[IV1]], [[IV0]]] : memref<2x3xf64>
# AFFINE-NEXT:        memref.store [[LOAD_0]], [[ALLOC_TRANSPOSE_1]][[[IV0]], [[IV1]]] : memref<3x2xf64>
# AFFINE-NEXT:      }
# AFFINE-NEXT:    }
# AFFINE-NEXT:    affine.for [[IV00:%.*]] = 0 to 3 {
# AFFINE-NEXT:      affine.for [[IV01:%.*]] = 0 to 2 {
# AFFINE-NEXT:        [[LOAD_1:%.*]] = affine.load [[ALLOC_CONST_2]][[[IV01]], [[IV00]]] : memref<2x3xf64>
# AFFINE-NEXT:        memref.store [[LOAD_1]], [[ALLOC_TRANSPOSE_2]][[[IV00]], [[IV01]]] : memref<3x2xf64>
# AFFINE-NEXT:      }
# AFFINE-NEXT:    }
# AFFINE-NEXT:    affine.for [[IV10:%.*]] = 0 to 3 {
# AFFINE-NEXT:      affine.for [[IV11:%.*]] = 0 to 2 {
# AFFINE-NEXT:        [[LOAD_MUL_L:%.*]] = affine.load [[ALLOC_TRANSPOSE_1]][[[IV10]], [[IV11]]] : memref<3x2xf64>
# AFFINE-NEXT:        [[LOAD_MUL_R:%.*]] = affine.load [[ALLOC_TRANSPOSE_2]][[[IV10]], [[IV11]]] : memref<3x2xf64>
# AFFINE-NEXT:        [[MUL:%.*]] = arith.mulf [[LOAD_MUL_L]], [[LOAD_MUL_R]] : f64
# AFFINE-NEXT:        memref.store [[MUL]], [[ALLOC_MUL]][[[IV10]], [[IV11]]] : memref<3x2xf64>
# AFFINE-NEXT:      }
# AFFINE-NEXT:    }
# AFFINE-NEXT:    toy.print [[ALLOC_MUL]] : memref<3x2xf64>
# AFFINE-NEXT:    memref.dealloc [[ALLOC_CONST_1]] : memref<2x3xf64>
# AFFINE-NEXT:    memref.dealloc [[ALLOC_CONST_2]] : memref<2x3xf64>
# AFFINE-NEXT:    memref.dealloc [[ALLOC_TRANSPOSE_1]] : memref<3x2xf64>
# AFFINE-NEXT:    memref.dealloc [[ALLOC_TRANSPOSE_2]] : memref<3x2xf64>
# AFFINE-NEXT:    memref.dealloc [[ALLOC_MUL]] : memref<3x2xf64>
# AFFINE-NEXT:    return
# AFFINE-NEXT:  }
