# RUN: toyc %s -action=toy | FileCheck %s --check-prefix=TOY 
# RUN: toyc %s -action=toy | toy-opt --inline | FileCheck %s --check-prefix=INLINE

def multiply_transpose(a, b) {
  return transpose(a) * transpose(b);
}

# TOY-LABEL: toy.func private @multiply_transpose(
# TOY-SAME:                                        [[ARG_0:%.*]]: tensor<*xf64>,
# TOY-SAME:                                        [[ARG_1:%.*]]: tensor<*xf64>) -> tensor<*xf64>
# TOY-NEXT:   [[TRANSPOSE_0:%.*]] = toy.transpose([[ARG_0]] : tensor<*xf64>) to tensor<*xf64>
# TOY-NEXT:   [[TRANSPOSE_1:%.*]] = toy.transpose([[ARG_1]] : tensor<*xf64>) to tensor<*xf64>
# TOY-NEXT:   [[MUL:%.*]] = toy.mul [[TRANSPOSE_0]], [[TRANSPOSE_1]]
# TOY-NEXT:   toy.return [[MUL]] : tensor<*xf64>

def main() {
  var a<2, 3> = [[1, 2, 3], [4, 5, 6]];
  var b<2, 3> = [1, 2, 3, 4, 5, 6];
  var x = multiply_transpose(a, b);
  var y = multiply_transpose(b, a);
  print(y);
}

# TOY-LABEL: toy.func @main() 
# TOY-NEXT:   [[CONSTANT_0:%.*]] = toy.constant dense<{{\[\[}}1.000000e+00, 2.000000e+00, 3.000000e+00], [4.000000e+00, 5.000000e+00, 6.000000e+00]]> : tensor<2x3xf64>
# TOY-NEXT:   [[RESHAPE_0:%.*]] = toy.reshape([[CONSTANT_0]] : tensor<2x3xf64>) to tensor<2x3xf64>
# TOY-NEXT:   [[CONSTANT_1:%.*]] = toy.constant dense<[1.000000e+00, 2.000000e+00, 3.000000e+00, 4.000000e+00, 5.000000e+00, 6.000000e+00]> : tensor<6xf64>
# TOY-NEXT:   [[RESHAPE_1:%.*]] = toy.reshape([[CONSTANT_1]] : tensor<6xf64>) to tensor<2x3xf64>
# TOY-NEXT:   [[CALL_0:%.*]] = toy.generic_call @multiply_transpose([[RESHAPE_0]], [[RESHAPE_1]]) : (tensor<2x3xf64>, tensor<2x3xf64>) -> tensor<*xf64>
# TOY-NEXT:   [[CALL_1:%.*]] = toy.generic_call @multiply_transpose([[RESHAPE_1]], [[RESHAPE_0]]) : (tensor<2x3xf64>, tensor<2x3xf64>) -> tensor<*xf64>
# TOY-NEXT:   toy.print [[CALL_1]] : tensor<*xf64>

# INLINE-LABEL: toy.func @main() 
# INLINE-NEXT:   [[CONSTANT_0:%.*]] = toy.constant dense<{{\[\[}}1.000000e+00, 2.000000e+00, 3.000000e+00], [4.000000e+00, 5.000000e+00, 6.000000e+00]]> : tensor<2x3xf64>
# INLINE-NEXT:   [[CAST_0:%.*]] = toy.cast [[CONSTANT_0]] : tensor<2x3xf64> to tensor<*xf64>
# INLINE-NEXT:   [[CAST_1:%.*]] = toy.cast [[CONSTANT_0]] : tensor<2x3xf64> to tensor<*xf64>
# INLINE-NEXT:   [[TRANSPOSE_0:%.*]] = toy.transpose([[CAST_0]] : tensor<*xf64>) to tensor<*xf64>
# INLINE-NEXT:   [[TRANSPOSE_1:%.*]] = toy.transpose([[CAST_1]] : tensor<*xf64>) to tensor<*xf64>
# INLINE-NEXT:   [[MUL:%.*]] = toy.mul [[TRANSPOSE_0]], [[TRANSPOSE_1]] : tensor<*xf64>
# INLINE-NEXT:   toy.print [[MUL]] : tensor<*xf64>
# INLINE-NEXT:   toy.return

